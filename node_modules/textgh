Software Rules Document: Handling sortDowntime Updates
Overview
This document outlines the process and rules for capturing and updating sortDowntime from the Angular UI to the Couchbase backend via a .NET Core application. The objective is to ensure seamless updates and integrations between the frontend Angular application and the backend services.

Data Flow
Angular UI: The frontend captures sortDowntime as part of the SortOperationReport_dto interface. The data, including timezone information, is then sent to the backend through an API call to the .NET Core controller.

.NET Core Controller (EditSortOperationReportController):

Receives the sortDowntime object from the Angular frontend.
Parses the object, ensuring that timezone conversions are handled if necessary since the .NET DTO does not originally include timezone information.
Repository Layer:

A new repository interface and implementation will be created for Couchbase interactions specifically designed to handle the sort operations (SortOperationCouchbaseRepository).
This repository will include methods to upsert the sortDowntime based on the changes from the Angular UI.
Couchbase Upsert Logic
The upsert operation will be designed to update the sortDowntime in Couchbase. It should handle concurrency and ensure data integrity.
The upsert logic will include the following fields for update: FacActStrtEndTim and FacActStrtEndTimUtc, which need to be synchronized with the Angular UI updates.
Implementation Details
Couchbase Repository (SortOperationCouchbaseRepository):

Method: UpsertSortDowntime(SortOperationDto dto)
This method will fetch the existing document using the document ID provided in the DTO.
It will update the document's downtime fields (FacActStrtEndTim and FacActStrtEndTimUtc) with the new values from the DTO.
Save the updated document back to Couchbase.
Angular DTO Changes:

Modify the SortOperationReport_dto to ensure it can serialize and deserialize the timezone information correctly, given that the backend .NET DTO does not handle timezone natively.
.NET Core Controller Adjustments:

Ensure the controller is equipped to convert the timezone from the DTO into the appropriate format for Couchbase if necessary.
Validate the data before passing it to the repository layer to ensure data integrity and correct timezone handling.
Testing Strategy
Unit Tests:

Write unit tests for the new repository methods focusing on the upsert logic.
Test the timezone handling in the controller to ensure the conversion is accurate.
Integration Tests:

Test the end-to-end flow from the Angular UI making an API call to the updates reflecting in the Couchbase database.
Ensure that concurrent updates are handled gracefully, maintaining data integrity.
Deployment Considerations
Ensure that all dependencies and libraries required for handling timezone conversions are included in the deployment package.
Verify configuration settings in both Angular and .NET environments to ensure they align with production settings, especially around data handling and timezone settings.
This structured approach ensures that updates to sortDowntime are handled efficiently and reliably, with clear separation of concerns and robust error handling.
