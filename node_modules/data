case WeeklySummaryActionType.TOGGLE_COLUMN_VISIBILITY: {
    let _tmd: TableMetaData = Object.assign({}, state.weeklySummaryTableMetaData);
    let _rightNow = new Date().toISOString();

    console.log('toggle', action.payload);

    for (var k = 0; k < _tmd.columns.length; k++) {
        let _col = _tmd.columns[k];

        // Find the specific column to toggle
        let _change = action.payload.filter(
            (colToToggle) => colToToggle.columnName === _col.columnName
        );

        if (_change.length > 0) {
            let _anySubcolActive = _col.subcolumns
                ? _col.subcolumns.filter(
                      (subcol) => subcol.isVisible && !subcol.isDisabled
                  ).length > 0
                : false;

            // Toggle visibility for subcolumns (if they exist)
            if (_col.subcolumns && _col.subcolumns.length > 0) {
                for (let i = 0; i < _col.subcolumns.length; i++) {
                    let _subcol = Object.assign({}, _col.subcolumns[i]);

                    if (!_subcol.isDisabled) {
                        _subcol.isVisible =
                            _change[0].state != null
                                ? _change[0].state
                                : !_anySubcolActive;
                        _subcol.lastUpdated = _rightNow;
                    }

                    _col.subcolumns.splice(i, 1, _subcol);
                }
            }

            // Toggle column visibility if no subcolumns exist or as a fallback
            _col.isToggled =
                _change[0].state !== undefined
                    ? _change[0].state
                    : !_col.isToggled;

            _col.lastUpdated = _rightNow;
            _tmd.lastUpdated = _rightNow;

            // Replace updated column
            _tmd.columns.splice(k, 1, _col);
            break;
        }
    }

    return {
        ...state,
        weeklySummaryTableMetaData: _tmd,
    };
}