namespace Domain.Entities
{
    public class SortConfirm
    {
        public string FacCnyCd { get; set; }
        public string FacMmnNa { get; set; }
        public string SrtDf { get; set; }
        public string SrtTypMmnTe { get; set; }
        public string PkgTckNr { get; set; }
        public string PkgSrtCnfTs { get; set; }
        public string Lna { get; set; }
        public string WaNa { get; set; }
        public string WrkPosNa { get; set; }
        public string UsrNr { get; set; }
        public string SrtSysNa { get; set; }
        public string InfSrcTypCd { get; set; }
    }
}
namespace Domain.Entities
{
    public class SortResponse
    {
        public string FacCnyCd { get; set; }
        public string FacMmnNa { get; set; }
        public string SrtDf { get; set; }
        public string SrtTypMmnTe { get; set; }
        public string SnObjTckNr { get; set; }
        public string EvtTs { get; set; }
        public string QryNr { get; set; }
        public string LdCnxNa { get; set; }
        public string InfSrcTypCd { get; set; }
        public string NdtPosIpTr { get; set; }
        public string SrtXcpRsnCd { get; set; }
        public string SrtXcpRsnDsCt { get; set; }
        public string SrtSysNa { get; set; }
        public string PkgLgLnstWaPos { get; set; }
    }
}
namespace Domain.Entities
{
    public class SortQuery
    {
        public string FacCnyCd { get; set; }
        public string FacMmnNa { get; set; }
        public string SrtDf { get; set; }
        public string SrtTypMmnTe { get; set; }
        public string SnObjTckNr { get; set; }
        public string EvtTs { get; set; }
        public string QryNr { get; set; }
        public string Cny3Cd { get; set; }
        public string PsICd { get; set; }
        public string BagLkEvyTe { get; set; }
        public string RsdCmcCsFdsTe { get; set; }
        public string WrkPosNa { get; set; }
        public string SrtPosFcCd { get; set; }
    }
}
Task<bool> ProcessSortConfirmAsync(PushMessage pushMessage);
        Task<bool> ProcessSortResponseAsync(PushMessage pushMessage);
        Task<bool> ProcessSortQueryAsync(PushMessage pushMessage);

using Application.Interfaces;
using Domain.Entities;
using Infrastructure.BigTable;
using Newtonsoft.Json;
using System;
using System.Text;
using System.Threading.Tasks;

namespace Application.Services
{
    public class SortService : ISortService
    {
        private readonly IBigTableService _bigTableService;

        public SortService(IBigTableService bigTableService)
        {
            _bigTableService = bigTableService;
        }

        public async Task<bool> ProcessSortConfirmAsync(PushMessage pushMessage)
        {
            try
            {
                // Deserialize the JSON data from the message
                byte[] data = Convert.FromBase64String(pushMessage.message.data);
                string jsonData = Encoding.UTF8.GetString(data);

                // Deserialize to the SortConfirm model
                var sortConfirm = JsonConvert.DeserializeObject<SortConfirm>(jsonData);
                if (sortConfirm == null)
                {
                    return false;
                }

                // Store the SortConfirm in BigTable
                return await _bigTableService.StoreSortConfirmAsync(sortConfirm);
            }
            catch (Exception)
            {
                return false;
            }
        }

        public async Task<bool> ProcessSortResponseAsync(PushMessage pushMessage)
        {
            try
            {
                byte[] data = Convert.FromBase64String(pushMessage.message.data);
                string jsonData = Encoding.UTF8.GetString(data);

                var sortResponse = JsonConvert.DeserializeObject<SortResponse>(jsonData);
                if (sortResponse == null)
                {
                    return false;
                }

                return await _bigTableService.StoreSortResponseAsync(sortResponse);
            }
            catch (Exception)
            {
                return false;
            }
        }

        public async Task<bool> ProcessSortQueryAsync(PushMessage pushMessage)
        {
            try
            {
                byte[] data = Convert.FromBase64String(pushMessage.message.data);
                string jsonData = Encoding.UTF8.GetString(data);

                var sortQuery = JsonConvert.DeserializeObject<SortQuery>(jsonData);
                if (sortQuery == null)
                {
                    return false;
                }

                return await _bigTableService.StoreSortQueryAsync(sortQuery);
            }
            catch (Exception)
            {
                return false;
            }
        }
    }
}
Task<bool> StoreSortConfirmAsync(SortConfirm sortConfirm);
        Task<bool> StoreSortResponseAsync(SortResponse sortResponse);
        Task<bool> StoreSortQueryAsync(SortQuery sortQuery);

 // Process SortConfirm message
        [HttpPost("ProcessSortConfirm")]
        public async Task<IActionResult> ProcessSortConfirm([FromBody] PushMessage pushMessage)
        {
            var isProcessed = await _sortService.ProcessSortConfirmAsync(pushMessage);

            if (isProcessed)
            {
                return Ok("Sort Confirm processed successfully.");
            }

            return BadRequest("Failed to process Sort Confirm.");
        }

        // Process SortResponse message
        [HttpPost("ProcessSortResponse")]
        public async Task<IActionResult> ProcessSortResponse([FromBody] PushMessage pushMessage)
        {
            var isProcessed = await _sortService.ProcessSortResponseAsync(pushMessage);

            if (isProcessed)
            {
                return Ok("Sort Response processed successfully.");
            }

            return BadRequest("Failed to process Sort Response.");
        }

        // Process SortQuery message
        [HttpPost("ProcessSortQuery")]
        public async Task<IActionResult> ProcessSortQuery([FromBody] PushMessage pushMessage)
        {
            var isProcessed = await _sortService.ProcessSortQueryAsync(pushMessage);

            if (isProcessed)
            {
                return Ok("Sort Query processed successfully.");
            }

            return BadRequest("Failed to process Sort Query.");
        }
    }
