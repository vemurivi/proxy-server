public async Task<bool> Refresh(
    JobEntry? jobEntry = null,
    bool regenFacilityDowSortMetrics = false,
    string? facKey = null,
    string? sortType = null,
    string? sortSeq = null,
    DateTime? sortDate = null)
{
    var jobRunTime = DateTime.UtcNow;
    var result = true;

    try
    {
        var sw = StopwatchWrapper.StartNew(Logger);

        List<Sort> sorts = new List<Sort>();

        // If a specific date is provided, only fetch data for that date
        if (sortDate.HasValue)
        {
            var sortsForDate = await SortRepo.GetPostSortRefreshSorts(sortDate.Value);
            if (sortsForDate != null)
            {
                sorts.AddRange(sortsForDate);
            }
        }
        else
        {
            // Pull sorts for the last 10 days if no specific date is provided
            var now = DateTime.UtcNow;
            DateTime firstSortDate = now.AddDays(-NumDaysForPostSortRefresh).AddHours(-12).Date;
            DateTime lastSortDate = now.Date;

            for (DateTime date = firstSortDate; date <= lastSortDate; date = date.AddDays(1))
            {
                var sortsForDate = await SortRepo.GetPostSortRefreshSorts(date);
                if (sortsForDate != null)
                {
                    sorts.AddRange(sortsForDate);
                }
            }
        }

        // Apply optional filters before proceeding further
        if (!string.IsNullOrEmpty(facKey))
        {
            sorts = sorts.Where(s => s.FacKey == facKey).ToList();
        }

        if (!string.IsNullOrEmpty(sortType))
        {
            sorts = sorts.Where(s => s.FacStrTypCd == sortType).ToList();
        }

        if (!string.IsNullOrEmpty(sortSeq))
        {
            sorts = sorts.Where(s => s.StrTypSeqNr == sortSeq).ToList();
        }

        // If no sorts remain after filtering, log and exit
        if (!sorts.Any())
        {
            Logger.Info("No sorts found after applying filters.");
            return true; // Follow existing logic
        }

        // Remove duplicates and keep only valid sorts
        sorts = sorts
            .Where(s => s.SrtDt.HasValue)
            .GroupBy(s => new { s.FacKey, s.SrtDt, s.FacStrTypCd })
            .Select(g => g.First())
            .ToList();

        // Filter down sorts to only include facilities where new timecards have been enabled
        var timecardEnabledFacs = (await CacheService.GetTimecardEnabledFacilities()) ?? new();
        sorts = Shared.GetTimecardEnabledSorts(sorts, timecardEnabledFacs);
        sw.IncrementTime("GetSortsForSortDate");

        // Refresh each sort
        (var updatedSorts, var updatedSorEmployees, var allUpdatedSors) =
            await RefreshSorts(sorts, sw, transaction: null);

        return result;
    }
    catch (Exception ex)
    {
        Logger.Error(ex, "An exception has occurred.");
        result = false;
    }

    return result;
}