[HttpPost]
[Route(nameof(TriggerLongRangePlanningJob))]
public async Task<ActionResult> TriggerLongRangePlanningJob(
    string? facility = null,
    string? sortType = null,
    string? sortSeq = null,
    DateTime? sortDate = null)
{
    try
    {
        var result = await PreSortRefreshModel.LongRangePlanningJob(
            facility: facility,
            sortType: sortType,
            sortSeq: sortSeq,
            sortDate: sortDate);

        return Ok(result);
    }
    catch (Exception ex)
    {
        return BadRequest(ex.Message);
    }
}

[HttpPost]
[Route(nameof(TriggerShortRangePlanningJob))]
public async Task<ActionResult> TriggerShortRangePlanningJob(
    string? facility = null,
    string? sortType = null,
    string? sortSeq = null,
    DateTime? sortDate = null)
{
    try
    {
        var result = await PreSortRefreshModel.ShortRangePlanningJob(
            facility: facility,
            sortType: sortType,
            sortSeq: sortSeq,
            sortDate: sortDate);

        return Ok(result);
    }
    catch (Exception ex)
    {
        return BadRequest(ex.Message);
    }
}
public async Task<bool> LongRangePlanningJob(
    string? facility = null,
    string? sortType = null,
    string? sortSeq = null,
    DateTime? sortDate = null,
    Guid? transaction = null)
{
    var result = true;

    try
    {
        var sorts = await SortRepo.GetLongRangeRefreshSorts();

        // Apply filters if values are provided
        if (!string.IsNullOrEmpty(facility))
        {
            sorts = sorts.Where(s => s.FacKey == facility).ToList();
        }

        if (!string.IsNullOrEmpty(sortType))
        {
            sorts = sorts.Where(s => s.FacStrTypCd == sortType).ToList();
        }

        if (!string.IsNullOrEmpty(sortSeq))
        {
            sorts = sorts.Where(s => s.StrTypSeqNr == sortSeq).ToList();
        }

        if (sortDate.HasValue)
        {
            sorts = sorts.Where(s => s.SrtDt == sortDate.Value).ToList();
        }

        if (!sorts.Any())
        {
            // If no filters match, follow existing logic
            return result;
        }

        result = await PreSortRefresh(sorts, refreshFromMetrics: true, transaction: transaction);
    }
    catch (Exception ex)
    {
        Logger.Error(ex, "An exception has occurred.");
        result = false;
    }

    return result;
}

public async Task<bool> ShortRangePlanningJob(
    string? facility = null,
    string? sortType = null,
    string? sortSeq = null,
    DateTime? sortDate = null,
    Guid? transaction = null)
{
    var result = true;

    try
    {
        var sorts = await SortRepo.GetShortRangeRefreshSorts();

        // Apply filters if values are provided
        if (!string.IsNullOrEmpty(facility))
        {
            sorts = sorts.Where(s => s.FacKey == facility).ToList();
        }

        if (!string.IsNullOrEmpty(sortType))
        {
            sorts = sorts.Where(s => s.FacStrTypCd == sortType).ToList();
        }

        if (!string.IsNullOrEmpty(sortSeq))
        {
            sorts = sorts.Where(s => s.StrTypSeqNr == sortSeq).ToList();
        }

        if (sortDate.HasValue)
        {
            sorts = sorts.Where(s => s.SrtDt == sortDate.Value).ToList();
        }

        if (!sorts.Any())
        {
            // If no filters match, follow existing logic
            return result;
        }

        result = await PreSortRefresh(sorts, refreshFromMetrics: false, transaction: transaction);
    }
    catch (Exception ex)
    {
        Logger.Error(ex, "An exception has occurred.");
        result = false;
    }

    return result;
}
