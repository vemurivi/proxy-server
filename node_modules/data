[TestFixture]
public class DataComparisonsControllerTests
{
    private Mock<ComparisonsRepository> _dataRepositoryMock;
    private Mock<ILogger<DataComparisonsController>> _loggerMock;
    private DataComparisonsController _controller;

    [SetUp]
    public void Setup()
    {
        _dataRepositoryMock = new Mock<ComparisonsRepository>();
        _loggerMock = new Mock<ILogger<DataComparisonsController>>();
        _controller = new DataComparisonsController(_dataRepositoryMock.Object, _loggerMock.Object);
    }

    [Test]
    public async Task FetchData_ShouldReturnOk_WhenDataIsFetchedSuccessfully()
    {
        // Arrange
        var gemsId = "testGemsId";
        var country = "testCountry";
        var facAbbr = "testFacAbbr";
        var sortDate = "2023-08-10";
        var sortTypeCd = "typeCd";

        var expectedData = new UserEntry(); // Replace with the expected data type

        _dataRepositoryMock.Setup(x => x.GetComparisonsData(gemsId, country, facAbbr, sortDate, sortTypeCd))
            .ReturnsAsync(expectedData);

        // Act
        var result = await _controller.FetchData(gemsId, country, facAbbr, sortDate, sortTypeCd);

        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().Be(expectedData);
    }

    [Test]
    public async Task FetchData_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        // Arrange
        var gemsId = "testGemsId";
        var country = "testCountry";
        var facAbbr = "testFacAbbr";
        var sortDate = "2023-08-10";
        var sortTypeCd = "typeCd";

        var exceptionMessage = "Error fetching table data.";

        _dataRepositoryMock.Setup(x => x.GetComparisonsData(gemsId, country, facAbbr, sortDate, sortTypeCd))
            .ThrowsAsync(new Exception(exceptionMessage));

        // Act
        var result = await _controller.FetchData(gemsId, country, facAbbr, sortDate, sortTypeCd);

        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        var response = badRequestResult.Value as Response<UserEntry>; // Adjust type if needed
        response.IsSuccess.Should().BeFalse();
        response.ErrorMessage.Should().Be(exceptionMessage);
    }
}
