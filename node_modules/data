using Microsoft.AspNetCore.Mvc;
using insops_broker_gcp_digital_operating_plan.Models;
using insops_broker_gcp_digital_operating_plan.Entities;

namespace insops_broker_gcp_digital_operating_plan.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ScanMessageController : ControllerBase
    {
        private readonly ScanModel scanModel;

        public ScanMessageController(ScanModel scanModel)
        {
            this.scanModel = scanModel;
        }

        // Process 'scanlabel' topic
        [HttpPost("ProcessScanLabel")]
        public ActionResult ProcessScanLabel([FromBody] PushMessage pushMessage)
        {
            var processMessage = scanModel.ProcessScanToBigTable(pushMessage);

            if (processMessage.Result)
            {
                return Ok("ScanLabel processed successfully");
            }

            return BadRequest("Failed to process ScanLabel");
        }

        // Process 'sortconfirm' topic
        [HttpPost("ProcessSortConfirm")]
        public ActionResult ProcessSortConfirm([FromBody] PushMessage pushMessage)
        {
            var processMessage = scanModel.ProcessScanToBigTable(pushMessage);

            if (processMessage.Result)
            {
                return Ok("SortConfirm processed successfully");
            }

            return BadRequest("Failed to process SortConfirm");
        }

        // Process 'sortquery' topic
        [HttpPost("ProcessSortQuery")]
        public ActionResult ProcessSortQuery([FromBody] PushMessage pushMessage)
        {
            var processMessage = scanModel.ProcessScanToBigTable(pushMessage);

            if (processMessage.Result)
            {
                return Ok("SortQuery processed successfully");
            }

            return BadRequest("Failed to process SortQuery");
        }

        // Process 'sortresponse' topic
        [HttpPost("ProcessSortResponse")]
        public ActionResult ProcessSortResponse([FromBody] PushMessage pushMessage)
        {
            var processMessage = scanModel.ProcessScanToBigTable(pushMessage);

            if (processMessage.Result)
            {
                return Ok("SortResponse processed successfully");
            }

            return BadRequest("Failed to process SortResponse");
        }
    }
}


namespace Domain.Entities
{
    public class ScanLabel
    {
        public string FacCnyCd { get; set; }
        public string FacMmnNa { get; set; }
        public string SrtDf { get; set; }
        public string SrtTypMmnTe { get; set; }
        public string SrtSysNa { get; set; }
        public string SnObjTckNr { get; set; }
        public string EvtTs { get; set; }
        public string QryNr { get; set; }
        public string WrkPosNa { get; set; }
        public string UsrNr { get; set; }
        public string PrtNr { get; set; }
        public string SldNr { get; set; }
        public string SrtNstRqtTypTe { get; set; }
        public string SrtSrcTypCd { get; set; }
        public string SldJbTypCd { get; set; }
        public string Cny3Cd { get; set; }
        public string AdPrjPsICd { get; set; }
    }
}


using Google.Cloud.Bigtable.V2;
using Google.Protobuf;
using Microsoft.Extensions.Logging;
using System;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace insops_broker_gcp_digital_operating_plan.Models
{
    public class ScanModel
    {
        private readonly ILogger<ScanModel> _logger;
        private readonly BigtableServiceApiClient _bigtableClient;

        private const string AppId = "DocGcpBroker";
        private string GcpProjectId { get; } = Environment.GetEnvironmentVariable("GcpProjectId");
        private string BigTableInstanceId { get; } = Environment.GetEnvironmentVariable("BigTableInstanceId");
        private string ScanDataTableId { get; } = Environment.GetEnvironmentVariable("ScanDataTableId");

        public ScanModel(ILogger<ScanModel> logger, BigtableServiceApiClient bigtableClient)
        {
            _logger = logger;
            _bigtableClient = bigtableClient;
        }

        public async Task<bool> ProcessScanToBigTable(PushMessage pushMessage)
        {
            try
            {
                // Deserialize the JSON data from the message
                byte[] data = Convert.FromBase64String(pushMessage.message.data);
                string scanDataStr = Encoding.UTF8.GetString(data);
                
                // Deserialize to the Scan Label model
                var scanLabel = JsonConvert.DeserializeObject<ScanLabel>(scanDataStr);
                if (scanLabel == null || string.IsNullOrEmpty(scanLabel.FacCnyCd) || string.IsNullOrEmpty(scanLabel.FacMmnNa))
                {
                    _logger.LogInformation("Invalid scan label data received.");
                    return false;
                }

                // BigTable row key (unique identifier) - use something like SnObjTckNr as row key
                string rowKey = scanLabel.SnObjTckNr;

                // Prepare BigTable mutation
                TableName tableName = new TableName(GcpProjectId, BigTableInstanceId, ScanDataTableId);
                MutateRowRequest mutateRowRequest = new MutateRowRequest
                {
                    TableNameAsTableName = tableName,
                    RowKey = ByteString.CopyFromUtf8(rowKey),
                    Mutations =
                    {
                        Mutations.SetCell("scan_data", "FacCnyCd", ByteString.CopyFromUtf8(scanLabel.FacCnyCd)),
                        Mutations.SetCell("scan_data", "FacMmnNa", ByteString.CopyFromUtf8(scanLabel.FacMmnNa)),
                        Mutations.SetCell("scan_data", "SrtDf", ByteString.CopyFromUtf8(scanLabel.SrtDf)),
                        Mutations.SetCell("scan_data", "SrtTypMmnTe", ByteString.CopyFromUtf8(scanLabel.SrtTypMmnTe)),
                        Mutations.SetCell("scan_data", "SrtSysNa", ByteString.CopyFromUtf8(scanLabel.SrtSysNa)),
                        Mutations.SetCell("scan_data", "SnObjTckNr", ByteString.CopyFromUtf8(scanLabel.SnObjTckNr)),
                        Mutations.SetCell("scan_data", "EvtTs", ByteString.CopyFromUtf8(scanLabel.EvtTs)),
                        Mutations.SetCell("scan_data", "QryNr", ByteString.CopyFromUtf8(scanLabel.QryNr)),
                        Mutations.SetCell("scan_data", "WrkPosNa", ByteString.CopyFromUtf8(scanLabel.WrkPosNa)),
                        Mutations.SetCell("scan_data", "UsrNr", ByteString.CopyFromUtf8(scanLabel.UsrNr)),
                        Mutations.SetCell("scan_data", "PrtNr", ByteString.CopyFromUtf8(scanLabel.PrtNr)),
                        Mutations.SetCell("scan_data", "SldNr", ByteString.CopyFromUtf8(scanLabel.SldNr)),
                        Mutations.SetCell("scan_data", "SrtNstRqtTypTe", ByteString.CopyFromUtf8(scanLabel.SrtNstRqtTypTe)),
                        Mutations.SetCell("scan_data", "SrtSrcTypCd", ByteString.CopyFromUtf8(scanLabel.SrtSrcTypCd)),
                        Mutations.SetCell("scan_data", "SldJbTypCd", ByteString.CopyFromUtf8(scanLabel.SldJbTypCd)),
                        Mutations.SetCell("scan_data", "Cny3Cd", ByteString.CopyFromUtf8(scanLabel.Cny3Cd)),
                        Mutations.SetCell("scan_data", "AdPrjPsICd", ByteString.CopyFromUtf8(scanLabel.AdPrjPsICd))
                    }
                };

                // Commit mutation to BigTable
                await _bigtableClient.MutateRowAsync(mutateRowRequest);
                _logger.LogInformation($"Successfully stored scan label data in Bigtable for row key: {rowKey}");

                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error processing scan data to BigTable: {ex.Message}");
                return false;
            }
        }
    }

    // Define the ScanLabel model to map the JSON fields
    public class ScanLabel
    {
        public string FacCnyCd { get; set; }
        public string FacMmnNa { get; set; }
        public string SrtDf { get; set; }
        public string SrtTypMmnTe { get; set; }
        public string SrtSysNa { get; set; }
        public string SnObjTckNr { get; set; }
        public string EvtTs { get; set; }
        public string QryNr { get; set; }
        public string WrkPosNa { get; set; }
        public string UsrNr { get; set; }
        public string PrtNr { get; set; }
        public string SldNr { get; set; }
        public string SrtNstRqtTypTe { get; set; }
        public string SrtSrcTypCd { get; set; }
        public string SldJbTypCd { get; set; }
        public string Cny3Cd { get; set; }
        public string AdPrjPsICd { get; set; }
    }
}
using Google.Cloud.Bigtable.V2;
using Google.Protobuf;
using Domain.Entities;
using System.Threading.Tasks;

namespace Infrastructure.BigTable
{
    public class BigTableService : IBigTableService
    {
        private readonly BigtableServiceApiClient _bigtableClient;
        private readonly string _projectId;
        private readonly string _instanceId;
        private readonly string _tableId;

        public BigTableService(BigtableServiceApiClient bigtableClient)
        {
            _bigtableClient = bigtableClient;
            _projectId = Environment.GetEnvironmentVariable("GcpProjectId");
            _instanceId = Environment.GetEnvironmentVariable("BigTableInstanceId");
            _tableId = Environment.GetEnvironmentVariable("ScanDataTableId");
        }

        public async Task<bool> StoreScanLabelAsync(ScanLabel scanLabel)
        {
            var tableName = new TableName(_projectId, _instanceId, _tableId);
            var rowKey = scanLabel.SnObjTckNr;

            // Create the mutation request to insert data into BigTable
            var mutation = new MutateRowRequest
            {
                TableNameAsTableName = tableName,
                RowKey = ByteString.CopyFromUtf8(rowKey),
                Mutations =
                {
                    Mutations.SetCell("scan_data", "FacCnyCd", ByteString.CopyFromUtf8(scanLabel.FacCnyCd)),
                    Mutations.SetCell("scan_data", "FacMmnNa", ByteString.CopyFromUtf8(scanLabel.FacMmnNa)),
                    Mutations.SetCell("scan_data", "SrtDf", ByteString.CopyFromUtf8(scanLabel.SrtDf)),
                    // Add more columns as needed
                }
            };

            await _bigtableClient.MutateRowAsync(mutation);
            return true;
        }
    }
}
var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddControllers();

// Add Bigtable and application services
builder.Services.AddSingleton<BigtableServiceApiClient>(sp => BigtableServiceApiClient.Create());
builder.Services.AddScoped<IBigTableService, BigTableService>();
builder.Services.AddScoped<IScanLabelService, ScanLabelService>();

var app = builder.Build();

// Configure the HTTP request pipeline
app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run();
