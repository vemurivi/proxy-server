import { BehaviorSubject } from 'rxjs';

export class WeeklySummaryComponent {
  // Observables with initial values as false
  showTotalHours$ = new BehaviorSubject<boolean>(false);
  showDirectHours$ = new BehaviorSubject<boolean>(false);
  showIndirectHours$ = new BehaviorSubject<boolean>(false);

  showAssignedStaffing$ = new BehaviorSubject<boolean>(false);
  showWorkedStaffing$ = new BehaviorSubject<boolean>(false);
  showAbsentStaffing$ = new BehaviorSubject<boolean>(false);
  showLessThanThree$ = new BehaviorSubject<boolean>(false);
  showGreaterThanFive$ = new BehaviorSubject<boolean>(false);
  showGreaterThanEight$ = new BehaviorSubject<boolean>(false);

  showSmallsPercent$ = new BehaviorSubject<boolean>(false);
  showSmallsVolume$ = new BehaviorSubject<boolean>(false);
  showSmallsPPH$ = new BehaviorSubject<boolean>(false);

  showIrregPercent$ = new BehaviorSubject<boolean>(false);
  showIrregVolume$ = new BehaviorSubject<boolean>(false);
  showIrregPPH$ = new BehaviorSubject<boolean>(false);

  // Get the colspan dynamically for Hours, Staffing, Smalls, and Irregulars
  getHoursColspan(): number {
    return this.calculateColspan([
      this.showTotalHours$,
      this.showDirectHours$,
      this.showIndirectHours$,
    ]);
  }

  getStaffingColspan(): number {
    return this.calculateColspan([
      this.showAssignedStaffing$,
      this.showWorkedStaffing$,
      this.showAbsentStaffing$,
      this.showLessThanThree$,
      this.showGreaterThanFive$,
      this.showGreaterThanEight$,
    ]);
  }

  getSmallsColspan(): number {
    return this.calculateColspan([
      this.showSmallsPercent$,
      this.showSmallsVolume$,
      this.showSmallsPPH$,
    ]);
  }

  getIrregularsColspan(): number {
    return this.calculateColspan([
      this.showIrregPercent$,
      this.showIrregVolume$,
      this.showIrregPPH$,
    ]);
  }

  // Consolidated logic for calculating colspan
  private calculateColspan(conditions: BehaviorSubject<boolean>[]): number {
    return conditions.reduce((colspan, condition) => {
      return condition.getValue() ? colspan + 1 : colspan;
    }, 0);
  }
}