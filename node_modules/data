  public async Task<bool> StoreSortConfirmAsync(SortConfirm sortConfirm)
        {
            var tableName = new TableName(_projectId, _instanceId, _tableId);
            var rowKey = sortConfirm.PkgTckNr;

            var mutation = new MutateRowRequest
            {
                TableNameAsTableName = tableName,
                RowKey = ByteString.CopyFromUtf8(rowKey),
                Mutations =
                {
                    Mutations.SetCell("sort_confirm", "FacCnyCd", ByteString.CopyFromUtf8(sortConfirm.FacCnyCd)),
                    Mutations.SetCell("sort_confirm", "FacMmnNa", ByteString.CopyFromUtf8(sortConfirm.FacMmnNa)),
                    Mutations.SetCell("sort_confirm", "SrtDf", ByteString.CopyFromUtf8(sortConfirm.SrtDf)),
                    Mutations.SetCell("sort_confirm", "SrtTypMmnTe", ByteString.CopyFromUtf8(sortConfirm.SrtTypMmnTe)),
                    Mutations.SetCell("sort_confirm", "PkgTckNr", ByteString.CopyFromUtf8(sortConfirm.PkgTckNr)),
                    Mutations.SetCell("sort_confirm", "PkgSrtCnfTs", ByteString.CopyFromUtf8(sortConfirm.PkgSrtCnfTs)),
                    Mutations.SetCell("sort_confirm", "Lna", ByteString.CopyFromUtf8(sortConfirm.Lna)),
                    Mutations.SetCell("sort_confirm", "WaNa", ByteString.CopyFromUtf8(sortConfirm.WaNa)),
                    Mutations.SetCell("sort_confirm", "WrkPosNa", ByteString.CopyFromUtf8(sortConfirm.WrkPosNa)),
                    Mutations.SetCell("sort_confirm", "UsrNr", ByteString.CopyFromUtf8(sortConfirm.UsrNr)),
                    Mutations.SetCell("sort_confirm", "SrtSysNa", ByteString.CopyFromUtf8(sortConfirm.SrtSysNa)),
                    Mutations.SetCell("sort_confirm", "InfSrcTypCd", ByteString.CopyFromUtf8(sortConfirm.InfSrcTypCd))
                }
            };

            await _bigtableClient.MutateRowAsync(mutation);
            return true;
        }

        // Store SortResponse data into BigTable
        public async Task<bool> StoreSortResponseAsync(SortResponse sortResponse)
        {
            var tableName = new TableName(_projectId, _instanceId, _tableId);
            var rowKey = sortResponse.SnObjTckNr;

            var mutation = new MutateRowRequest
            {
                TableNameAsTableName = tableName,
                RowKey = ByteString.CopyFromUtf8(rowKey),
                Mutations =
                {
                    Mutations.SetCell("sort_response", "FacCnyCd", ByteString.CopyFromUtf8(sortResponse.FacCnyCd)),
                    Mutations.SetCell("sort_response", "FacMmnNa", ByteString.CopyFromUtf8(sortResponse.FacMmnNa)),
                    Mutations.SetCell("sort_response", "SrtDf", ByteString.CopyFromUtf8(sortResponse.SrtDf)),
                    Mutations.SetCell("sort_response", "SrtTypMmnTe", ByteString.CopyFromUtf8(sortResponse.SrtTypMmnTe)),
                    Mutations.SetCell("sort_response", "SnObjTckNr", ByteString.CopyFromUtf8(sortResponse.SnObjTckNr)),
                    Mutations.SetCell("sort_response", "EvtTs", ByteString.CopyFromUtf8(sortResponse.EvtTs)),
                    Mutations.SetCell("sort_response", "QryNr", ByteString.CopyFromUtf8(sortResponse.QryNr)),
                    Mutations.SetCell("sort_response", "LdCnxNa", ByteString.CopyFromUtf8(sortResponse.LdCnxNa)),
                    Mutations.SetCell("sort_response", "InfSrcTypCd", ByteString.CopyFromUtf8(sortResponse.InfSrcTypCd)),
                    Mutations.SetCell("sort_response", "NdtPosIpTr", ByteString.CopyFromUtf8(sortResponse.NdtPosIpTr)),
                    Mutations.SetCell("sort_response", "SrtXcpRsnCd", ByteString.CopyFromUtf8(sortResponse.SrtXcpRsnCd)),
                    Mutations.SetCell("sort_response", "SrtXcpRsnDsCt", ByteString.CopyFromUtf8(sortResponse.SrtXcpRsnDsCt)),
                    Mutations.SetCell("sort_response", "SrtSysNa", ByteString.CopyFromUtf8(sortResponse.SrtSysNa)),
                    Mutations.SetCell("sort_response", "PkgLgLnstWaPos", ByteString.CopyFromUtf8(sortResponse.PkgLgLnstWaPos))
                }
            };

            await _bigtableClient.MutateRowAsync(mutation);
            return true;
        }

        // Store SortQuery data into BigTable
        public async Task<bool> StoreSortQueryAsync(SortQuery sortQuery)
        {
            var tableName = new TableName(_projectId, _instanceId, _tableId);
            var rowKey = sortQuery.SnObjTckNr;

            var mutation = new MutateRowRequest
            {
                TableNameAsTableName = tableName,
                RowKey = ByteString.CopyFromUtf8(rowKey),
                Mutations =
                {
                    Mutations.SetCell("sort_query", "FacCnyCd", ByteString.CopyFromUtf8(sortQuery.FacCnyCd)),
                    Mutations.SetCell("sort_query", "FacMmnNa", ByteString.CopyFromUtf8(sortQuery.FacMmnNa)),
                    Mutations.SetCell("sort_query", "SrtDf", ByteString.CopyFromUtf8(sortQuery.SrtDf)),
                    Mutations.SetCell("sort_query", "SrtTypMmnTe", ByteString.CopyFromUtf8(sortQuery.SrtTypMmnTe)),
                    Mutations.SetCell("sort_query", "SnObjTckNr", ByteString.CopyFromUtf8(sortQuery.SnObjTckNr)),
                    Mutations.SetCell("sort_query", "EvtTs", ByteString.CopyFromUtf8(sortQuery.EvtTs)),
                    Mutations.SetCell("sort_query", "QryNr", ByteString.CopyFromUtf8(sortQuery.QryNr)),
                    Mutations.SetCell("sort_query", "Cny3Cd", ByteString.CopyFromUtf8(sortQuery.Cny3Cd)),
                    Mutations.SetCell("sort_query", "PsICd", ByteString.CopyFromUtf8(sortQuery.PsICd)),
                    Mutations.SetCell("sort_query", "BagLkEvyTe", ByteString.CopyFromUtf8(sortQuery.BagLkEvyTe)),
                    Mutations.SetCell("sort_query", "RsdCmcCsFdsTe", ByteString.CopyFromUtf8(sortQuery.RsdCmcCsFdsTe)),
                    Mutations.SetCell("sort_query", "WrkPosNa", ByteString.CopyFromUtf8(sortQuery.WrkPosNa)),
                    Mutations.SetCell("sort_query", "SrtPosFcCd", ByteString.CopyFromUtf8(sortQuery.SrtPosFcCd))
                }
            };

            await _bigtableClient.MutateRowAsync(mutation);
            return true;
        }
