toggleSORChangeLog$ = createEffect(() =>
  this.actions$.pipe(
    ofType(
      _store.viewAndLayoutActions.ToggleSORChangeLog,
      _store.viewAndLayoutActions.ViewAndLayoutActionType.TOGGLE_SOR_CHANGE_LOG
    ),
    withLatestFrom(
      this.store.select(_store.fromViewAndLayout.getSORColumnManagementShowing),
      this.store.select(_store.fromViewAndLayout.getWeeklySummaryColumnManagementShowing)
    ),
    switchMap(([action, isSORColumnManagementShowing, isWeeklySummaryShowing]) => {
      const sendReq =
        !isSORColumnManagementShowing &&
        !isWeeklySummaryShowing &&
        action.payload !== false;

      return sendReq
        ? of({
            type: _store.viewAndLayoutActions.ViewAndLayoutActionType.TOGGLE_SOR_COLUMN_MANAGEMENT,
            payload: false,
          })
        : of();
    })
  )
);

toggleSORColumnManagement$ = createEffect(() =>
  this.actions$.pipe(
    ofType(
      _store.viewAndLayoutActions.ToggleSORColumnManagement,
      _store.viewAndLayoutActions.ViewAndLayoutActionType.TOGGLE_SOR_COLUMN_MANAGEMENT
    ),
    withLatestFrom(
      this.store.select(_store.fromViewAndLayout.getSORChangeLogShowing),
      this.store.select(_store.fromViewAndLayout.getWeeklySummaryColumnManagementShowing)
    ),
    switchMap(([action, isSORChangeLogShowing, isWeeklySummaryShowing]) => {
      const sendReq =
        !isSORChangeLogShowing &&
        !isWeeklySummaryShowing &&
        action.payload !== false;

      return sendReq
        ? of({
            type: _store.viewAndLayoutActions.ViewAndLayoutActionType.TOGGLE_SOR_CHANGE_LOG,
            payload: false,
          })
        : of();
    })
  )
);

toggleWeeklySummaryColumnManagement$ = createEffect(() =>
  this.actions$.pipe(
    ofType(
      _store.viewAndLayoutActions.ToggleWeeklySummaryColumnManagement,
      _store.viewAndLayoutActions.ViewAndLayoutActionType.TOGGLE_WEEKLY_SUMMARY_COLUMN_MANAGEMENT
    ),
    withLatestFrom(
      this.store.select(_store.fromViewAndLayout.getSORChangeLogShowing),
      this.store.select(_store.fromViewAndLayout.getSORColumnManagementShowing)
    ),
    switchMap(([action, isSORChangeLogShowing, isSORColumnManagementShowing]) => {
      const sendReq =
        !isSORChangeLogShowing &&
        !isSORColumnManagementShowing &&
        action.payload !== false;

      return sendReq
        ? of({
            type: _store.viewAndLayoutActions.ViewAndLayoutActionType.TOGGLE_SOR_CHANGE_LOG,
            payload: false,
          })
        : of();
    })
  )
);