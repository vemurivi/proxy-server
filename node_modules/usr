


public async Task<List<BagUidLink>> ReadBagUidLinksWithPagination(string regexPattern, int pageSize = 1000, StopwatchWrapper? sw = null)
{
    var allBagLinks = new List<BagUidLink>();
    string startRowKey = ""; // Start from the beginning for the first page
    bool hasMoreRows = true;

    while (hasMoreRows)
    {
        var bagLinks = new ConcurrentBag<BagUidLink>();
        var filterList = new List<RowFilter>();

        filterList.Add(RowFilters.RowKeyRegex(regexPattern));
        var rowFilter = RowFilters.Chain(filterList.ToArray());

        var readRowsRequest = new ReadRowsRequest
        {
            TableNameAsTableName = TableName,
            RowFilter = rowFilter,
            RowsLimit = pageSize, // Set row limit for pagination
            Rows = new RowSet
            {
                RowRanges = { new RowRange
                {
                    StartKeyClosed = ByteString.CopyFromUtf8(startRowKey),  // Start from the given key
                    EndKeyOpen = ByteString.Empty                           // Read until the end or limit
                }}
            }
        };

        var bagUidLinksResponse = BigTableClient.ReadRows(readRowsRequest);
        string lastRowKey = ""; // To store the last row key for pagination

        await bagUidLinksResponse.ForEachAsync(row =>
        {
            var link = new BagUidLink();
            foreach (var cell in row.Cells)
            {
                if (cell.Qualifier.Equals(DataColumn))
                {
                    link.SomeProperty = JsonConvert.DeserializeObject<string>(cell.Value.ToStringUtf8());
                }
            }

            if (link != null)
            {
                bagLinks.Add(link);
            }

            // Update lastRowKey to the current row's key
            lastRowKey = row.Key.ToStringUtf8();
        });

        // Add the current batch of links to the main list
        allBagLinks.AddRange(bagLinks);

        // If fewer rows than pageSize were returned, there are no more rows to read
        if (bagLinks.Count < pageSize)
        {
            hasMoreRows = false;
        }
        else
        {
            // Update startRowKey to the last row key for the next page
            startRowKey = lastRowKey;
        }
    }

    sw?.IncrementTime("ReadRows");

    return allBagLinks;
}