using Moq;
using NUnit.Framework;
using FluentAssertions;
using System;
using System.Threading.Tasks;

{
    [TestFixture]
    public class UserModelTests
    {
        private Mock<ILogger<UserModel>> _mockLogger;
        private Mock<IUserRepository> _mockUserRepository;
        private UserModel _userModel;

        [SetUp]
        public void SetUp()
        {
            _mockLogger = new Mock<ILogger<UserModel>>();
            _mockUserRepository = new Mock<IUserRepository>();
            _userModel = new UserModel(_mockLogger.Object, _mockUserRepository.Object);
        }

        [Test]
        public async Task EditUserEntry_ShouldReturnResponseCode_WhenEditIsSuccessful()
        {
            // Arrange
            var userEntry = new UserEntry(); // Create a sample UserEntry object
            var expectedResponse = 1; // Assuming a successful response returns 1
            
            _mockUserRepository
                .Setup(repo => repo.EditUserEntry(userEntry))
                .ReturnsAsync(expectedResponse);

            // Act
            var result = await _userModel.EditUserEntry(userEntry);

            // Assert
            result.Should().Be(expectedResponse);
            _mockUserRepository.Verify(repo => repo.EditUserEntry(userEntry), Times.Once);
            _mockLogger.Verify(logger => logger.Error(It.IsAny<string>()), Times.Never);
        }

        [Test]
        public async Task EditUserEntry_ShouldLogErrorAndReturnZero_WhenExceptionIsThrown()
        {
            // Arrange
            var userEntry = new UserEntry(); // Create a sample UserEntry object
            var exceptionMessage = "Database connection error";

            _mockUserRepository
                .Setup(repo => repo.EditUserEntry(userEntry))
                .ThrowsAsync(new Exception(exceptionMessage));

            // Act
            var result = await _userModel.EditUserEntry(userEntry);

            // Assert
            result.Should().Be(0);
            _mockLogger.Verify(logger => logger.Error(It.Is<string>(msg => msg.Contains("Error in model's FetchUserWithDocKey"))), Times.Once);
        }
    }
}
