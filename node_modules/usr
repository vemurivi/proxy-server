public async Task<List<UidLink>> RegexQuery(string regexPattern, StopwatchWrapper? sw = null, int pageSize = 1000)
{
    var bagLinks = new ConcurrentBag<UidLink>();
    string startRowKey = ""; // Start from the beginning for the first page
    bool hasMoreRows = true;

    while (hasMoreRows)
    {
        var filterList = new List<RowFilter>
        {
            RowFilters.RowKeyRegex(regexPattern),
            RowFilters.FamilyNameExact(BagUidDataTableColumnFamily)
        };
        var rowFilter = RowFilters.Chain(filterList.ToArray());

        var readRowsRequest = new ReadRowsRequest
        {
            TableNameAsTableName = TableName,
            RowFilter = rowFilter,
            RowsLimit = pageSize,
            Rows = new RowSet
            {
                RowRanges = { new RowRange
                {
                    StartKeyClosed = ByteString.CopyFromUtf8(startRowKey),
                    EndKeyOpen = ByteString.Empty
                }}
            }
        };

        var bagUidLinkResponse = BigTableClient.ReadRows(readRowsRequest);
        string lastRowKey = string.Empty;

        AsyncResponseStream<ReadRowsResponse> bagUidLinkResponseStream = bagUidLinkResponse.GetResponseStream();
        sw?.IncrementTime("Heat GetResponseStream");
        var bagsCol = ByteString.CopyFromUtf8(BagUidDataTableColumn);

        await bagUidLinkResponseStream.ForEachAsync(row =>
        {
            UidLink combinedRow = null;
            foreach (var cellChunk in row.Chunks)
            {
                if ((cellChunk.RowKey ?? ByteString.Empty) != ByteString.Empty)
                {
                    if (combinedRow != null)
                    {
                        bagLinks.Add(combinedRow);
                    }
                    combinedRow = new UidLink();
                }

                switch (cellChunk.Qualifier)
                {
                    case { } q when q.SequenceEqual(bagsCol):
                        combinedRow = JsonConvert.DeserializeObject<UidLink>(cellChunk.Value.ToStringUtf8());
                        break;
                }

                // Update lastRowKey to the current row key for pagination
                lastRowKey = row.Key.ToStringUtf8();
            }

            // After processing all chunks, add the last combinedRow if not null
            if (combinedRow != null)
            {
                bagLinks.Add(combinedRow);
            }
        });

        await bagUidLinkResponseStream.DisposeAsync();
        sw?.IncrementTime("Heat StreamForEachAsync");

        // Check if we have more rows to fetch
        if (bagLinks.Count < pageSize)
        {
            hasMoreRows = false; // No more rows to read
        }
        else
        {
            startRowKey = lastRowKey; // Use last row key for the next page
        }
    }

    return bagLinks.ToList();
}