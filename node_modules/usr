
public async Task<bool> UpdateFacActStrtEndTimUtcAsync(string gemsId, string country, string facAbbr, DateTime newEndTimeUtc)
{
    try
    {
        // Retrieve bucket and collection from Couchbase (no need to hard-code bucket name)
        var bucket = await BucketProvider.GetBucketAsync();
        var collection = bucket.DefaultCollection();

        // Construct the document key (docId) based on the business logic (e.g., facKey and gemsId)
        string docId = $"{country}-{facAbbr}-{gemsId}";  // Adjust to match your actual document key pattern

        // Fetch the document (if needed)
        var document = await collection.GetAsync(docId);

        if (document == null)
        {
            Console.WriteLine($"Document with id {docId} not found.");
            return false;
        }

        // Update the document with the new 'FacActStrtEndTimUtc' value
        var result = await collection.MutateInAsync(docId, specs =>
        {
            specs.Upsert("FacActStrtEndTimUtc", newEndTimeUtc.ToString("o"));  // ISO 8601 format
        });

        // Return success if CAS is updated
        return result.Cas > 0;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error during update operation: {ex.Message}");
        return    var mutationResult = await collection.UpsertAsync(sortDocKey, sort);
    
    if (mutationResult.Cas > 0)
    {
        Logger.Info($"Successfully updated sort downtime for {sortDocKey}");
        return true;
    }
    else
    {
        Logger.Error($"Failed to update sort downtime for {sortDocKey}");
        return false;
    }
}

