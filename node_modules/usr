_bucketMock.SetupGet(b => b.DefaultCollection).Returns(_collectionMock.Object);

        // Setup BucketProvider mock to return the mocked bucket
        _bucketProviderMock.Setup(bp => bp.GetBucketAsync()).ReturnsAsync(_bucketMock.Object);

        // Set up the repository with the mocked BucketProvider
        _repository = new ComparisonsRepository(_bucketProviderMock.Object);
    }

    [Test]
    public async Task GetComparisonsData_ShouldReturnNull_WhenFacilityNotFound()
    {
        // Arrange
        string gemsId = "testGemsId";
        string country = "testCountry";
        string facAbbr = "testFacAbbr";
        string sortDateStr = "2024-08-14";
        string sortTypCd = "testSortTypeCd";

        _collectionMock.Setup(c => c.BulkGetInsideOpsObjs<Facility>(
            It.IsAny<IEnumerable<string>>())).ReturnsAsync((Facility)null);

        // Act
        var result = await _repository.GetComparisonsData(gemsId, country, facAbbr, sortDateStr, null, sortTypCd);

        // Assert
        result.Should().BeNull();
    }

    [Test]
    public async Task GetComparisonsData_ShouldReturnData_WhenFacilityExists()
    {
        // Arrange
        string gemsId = "testGemsId";
        string country = "testCountry";
        string facAbbr = "testFacAbbr";
        string sortDateStr = "2024-08-14";
        string sortTypCd = "testSortTypeCd";
        var facility = new Facility { /* Setup necessary properties */ };

        _collectionMock.Setup(c => c.BulkGetInsideOpsObjs<Facility>(
            It.IsAny<IEnumerable<string>>())).ReturnsAsync(facility);

        // Act
        var result = await _repository.GetComparisonsData(gemsId, country, facAbbr, sortDateStr, null, sortTypCd);

        // Assert
        result.Should().NotBeNull();
        // Add more assertions based on expected properties
    }

    [Test]
    public async Task GetComparisonsData_ShouldLogError_WhenExceptionIsThrown()
    {
        // Arrange
        string gemsId = "testGemsId";
        string country = "testCountry";
        string facAbbr = "testFacAbbr";
        string sortDateStr = "2024-08-14";
        string sortTypCd = "testSortTypeCd";

        _collectionMock.Setup(c => c.BulkGetInsideOpsObjs<Facility>(
            It.IsAny<IEnumerable<string>>())).ThrowsAsync(new Exception("Test exception"));

        // Act
        Func<Task> act = async () => await _repository.GetComparisonsData(gemsId, country, facAbbr, sortDateStr, null, sortTypCd);

        // Assert
        await act.Should().ThrowAsync<Exception>().WithMessage("Test exception");
    }
}
