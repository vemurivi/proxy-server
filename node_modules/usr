import { Action } from '@ngrx/store';

export enum WeeklySummaryActionType {
  TOGGLE_COLUMN_VISIBILITY = '[Weekly Summary] Toggle Column Visibility',
  LOAD_COLUMNS_METADATA = '[Weekly Summary] Load Columns Metadata'
}

export class ToggleColumnVisibility implements Action {
  readonly type = WeeklySummaryActionType.TOGGLE_COLUMN_VISIBILITY;
  constructor(public payload: { columnName: string; isVisible: boolean }) {}
}

export class LoadColumnsMetadata implements Action {
  readonly type = WeeklySummaryActionType.LOAD_COLUMNS_METADATA;
  constructor(public payload: string[]) {}
}



import { WeeklySummaryActionType, WeeklySummaryActions } from '../actions/weekly-summary.actions';

export interface WeeklySummaryState {
  columnsMetadata: { columnName: string; isVisible: boolean }[];
}

export const initialState: WeeklySummaryState = {
  columnsMetadata: [
    { columnName: 'Volume', isVisible: true },
    { columnName: 'PPH', isVisible: true },
    { columnName: 'Span', isVisible: true },
    { columnName: 'Flow/Hr', isVisible: true },
    { columnName: 'Hours', isVisible: true },
    { columnName: 'Staffing', isVisible: true },
    { columnName: 'PD Day', isVisible: true },
    { columnName: 'Pr Rate', isVisible: true },
    { columnName: 'Smalls', isVisible: true },
    { columnName: 'Irregulars', isVisible: true }
  ]
};

export function weeklySummaryReducer(
  state = initialState,
  action: WeeklySummaryActions
): WeeklySummaryState {
  switch (action.type) {
    case WeeklySummaryActionType.TOGGLE_COLUMN_VISIBILITY:
      return {
        ...state,
        columnsMetadata: state.columnsMetadata.map((col) =>
          col.columnName === action.payload.columnName
            ? { ...col, isVisible: action.payload.isVisible }
            : col
        )
      };
    case WeeklySummaryActionType.LOAD_COLUMNS_METADATA:
      return {
        ...state,
        columnsMetadata: action.payload.map((col) => ({ columnName: col, isVisible: true }))
      };
    default:
      return state;
  }
}


import { createFeatureSelector, createSelector } from '@ngrx/store';
import { WeeklySummaryState } from '../reducers/weekly-summary.reducer';

export const getWeeklySummaryState = createFeatureSelector<WeeklySummaryState>('weeklySummary');

export const getColumnsMetadata = createSelector(
  getWeeklySummaryState,
  (state: WeeklySummaryState) => state.columnsMetadata
);

export const getVisibleColumns = createSelector(
  getColumnsMetadata,
  (columns) => columns.filter((col) => col.isVisible)
);


import { Component } from '@angular/core';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import {
  ToggleColumnVisibility,
  LoadColumnsMetadata
} from '../store/actions/weekly-summary.actions';
import { getColumnsMetadata } from '../store/selectors/weekly-summary.selectors';

@Component({
  selector: 'app-weekly-summary-column-management',
  templateUrl: './weekly-summary-column-management.component.html',
  styleUrls: ['./weekly-summary-column-management.component.scss']
})
export class WeeklySummaryColumnManagementComponent {
  columnsMetadata$: Observable<{ columnName: string; isVisible: boolean }[]>;

  constructor(private store: Store) {
    this.columnsMetadata$ = this.store.select(getColumnsMetadata);
    this.store.dispatch(new LoadColumnsMetadata(['Volume', 'PPH', 'Span', 'Flow/Hr', 'Hours',
      'Staffing', 'PD Day', 'Pr Rate', 'Smalls', 'Irregulars']));
  }

  toggleColumn(columnName: string, isVisible: boolean): void {
    this.store.dispatch(new ToggleColumnVisibility({ columnName, isVisible }));
  }
}


<div class="column-management-container">
  <h3>Manage View</h3>
  <div *ngFor="let column of columnsMetadata$ | async">
    <label class="column-toggle">
      <input
        type="checkbox"
        [checked]="column.isVisible"
        (change)="toggleColumn(column.columnName, $event.target.checked)"
      />
      {{ column.columnName }}
    </label>
  </div>
</div>



<slide-out>
  <weekly-summary-column-management></weekly-summary-column-management>
</slide-out>

<div class="tableContainer">
  <table>
    <thead>
      <tr>
        <th *ngIf="columnsMap['volume']">Volume</th>
        <th *ngIf="columnsMap['pph']">PPH</th>
        <th *ngIf="columnsMap['span']">Span</th>
        <th *ngIf="columnsMap['flowHr']">Flow/Hr</th>
        <th *ngIf="columnsMap['hours']">Hours</th>
        <th *ngIf="columnsMap['staffing']">Staffing</th>
        <th *ngIf="columnsMap['pdDay']">PD Day</th>
        <th *ngIf="columnsMap['prRate']">Pr Rate</th>
        <th *ngIf="columnsMap['smalls']">Smalls</th>
        <th *ngIf="columnsMap['irregulars']">Irregulars</th>
      </tr>
    </thead>
    <tbody>
      <!-- Example Rows -->
      <tr>
        <td *ngIf="columnsMap['volume']">123</td>
        <td *ngIf="columnsMap['pph']">456</td>
        <td *ngIf="columnsMap['span']">2.5</td>
        <td *ngIf="columnsMap['flowHr']">4.0</td>
        <td *ngIf="columnsMap['hours']">7.5</td>
        <td *ngIf="columnsMap['staffing']">12</td>
        <td *ngIf="columnsMap['pdDay']">2</td>
        <td *ngIf="columnsMap['prRate']">85%</td>
        <td *ngIf="columnsMap['smalls']">20%</td>
        <td *ngIf="columnsMap['irregulars']">5%</td>
      </tr>
    </tbody>
  </table>
</div>


