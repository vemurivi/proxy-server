export const selectUpdatedVolume = createSelector(
  getSortOpReportState,  // Replace with the correct state slice
  (state: SortOpReportState) => state.updatedVolume  // Adjust based on your state structure
);

const initialState: SortOpReportState = {
  updatedVolume: null,  // Define initial state
  // other properties...
};

export function reducer(
  state = initialState,
  action: sortOpReportActions.ActionsUnion
): SortOpReportState {
  switch (action.type) {
    case sortOpReportActions.UpdateWorkArea:
      return {
        ...state,
        updatedVolume: action.payload.uve.value,  // Update the state with the new volume
      };

    // other cases...

    default:
      return state;
  }
}
this.sorStore.dispatch(
  new sortOpReportActions.UpdateWorkArea({
    path: { ...this.wa.volume.path },
    uve: uve,
  })
);

// Log the updated volume from the state
this.sorStore
  .select(fromSortOpReportStore.selectUpdatedVolume)
  .pipe(take(1))
  .subscribe((updatedVolume) => {
    console.log('Updated Volume from State after Dispatch:', updatedVolume);
  });


