using Moq;
using NUnit.Framework;
using FluentAssertions;
using System;
using System.Threading.Tasks;

{
    [TestFixture]
    public class UserModelTests
    {
        private Mock<ILogger<UserModel>> _mockLogger;
        private Mock<IUserRepository> _mockUserRepository;
        private UserModel _userModel;

        [SetUp]
        public void SetUp()
        {
            _mockLogger = new Mock<ILogger<UserModel>>();
            _mockUserRepository = new Mock<IUserRepository>();
            _userModel = new UserModel(_mockLogger.Object, _mockUserRepository.Object);
        }

        [Test]
        public async Task FetchUserEntry_ShouldReturnUserEntry_WhenUserExists()
        {
            // Arrange
            var id = "some-id";
            var transaction = Guid.NewGuid();
            var expectedUserEntry = new UserEntry();
            
            _mockUserRepository
                .Setup(repo => repo.FetchUserEntryWithDocKey(id, transaction))
                .ReturnsAsync(expectedUserEntry);

            // Act
            var result = await _userModel.FetchUserEntry(id, transaction);

            // Assert
            result.Result.Should().Be(expectedUserEntry);
            result.IsSuccess.Should().BeTrue();
            result.ErrorMessage.Should().BeNullOrEmpty();
            _mockUserRepository.Verify(repo => repo.FetchUserEntryWithDocKey(id, transaction), Times.Once);
        }

        [Test]
        public async Task FetchUserEntry_ShouldReturnFailure_WhenExceptionIsThrown()
        {
            // Arrange
            var id = "some-id";
            var transaction = Guid.NewGuid();
            
            _mockUserRepository
                .Setup(repo => repo.FetchUserEntryWithDocKey(id, transaction))
                .ThrowsAsync(new Exception("Database connection error"));

            // Act
            var result = await _userModel.FetchUserEntry(id, transaction);

            // Assert
            result.Result.Should().BeNull();
            result.IsSuccess.Should().BeFalse();
            result.ErrorMessage.Should().Be("Failure to retrieve User Entry");
            _mockLogger.Verify(logger => logger.Error(It.IsAny<string>(), transaction), Times.Once);
        }
    }
}
