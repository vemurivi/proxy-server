// date-validator.service.ts
import { Injectable } from '@angular/core';
import { AbstractControl, ValidationErrors } from '@angular/forms';

@Injectable({
  providedIn: 'root'
})
export class DateValidatorService {

  validateMinDate(minDate: Date): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      const inputValue = control.value as Date;
      const isAboveMin = inputValue >= new Date(minDate);
      return isAboveMin ? null : { 'valueBelowMinThreshold': true };
    };
  }

  validateMaxDate(maxDate: Date): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      const inputValue = control.value as Date;
      const isBelowMax = inputValue <= new Date(maxDate);
      return isBelowMax ? null : { 'valueAboveMaxThreshold': true };
    };
  }
}

import { Component } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { DateValidatorService } from './date-validator.service';

@Component({
  selector: 'app-some-component',
  templateUrl: './some.component.html',
  styleUrls: ['./some.component.css']
})
export class SomeComponent {
  form: FormGroup;

  constructor(private fb: FormBuilder, private dateValidatorService: DateValidatorService) {
    this.createForm();
  }


import { TestBed } from '@angular/core/testing';
import { DateValidatorService } from './date-validator.service';
import { FormControl } from '@angular/forms';

describe('DateValidatorService', () => {
  let service: DateValidatorService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [DateValidatorService]
    });
    service = TestBed.inject(DateValidatorService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  describe('validateMinDate', () => {
    it('should return null if the date and time are above the minimum threshold', () => {
      const control = new FormControl(new Date('2022-01-02T12:30:00'));
      const validator = service.validateMinDate(new Date('2022-01-02T12:00:00'));
      expect(validator(control)).toBeNull();
    });

    it('should return an error object if the date and time are below the minimum threshold', () => {
      const control = new FormControl(new Date('2022-01-02T11:30:00'));
      const validator = service.validateMinDate(new Date('2022-01-02T12:00:00'));
      expect(validator(control)).toEqual({ valueBelowMinThreshold: true });
    });
  });

  describe('validateMaxDate', () => {
    it('should return null if the date and time are below the maximum threshold', () => {
      const control = new FormControl(new Date('2024-01-01T23:45:00'));
      const validator = service.validateMaxDate(new Date('2024-01-02T00:00:00'));
      expect(validator(control)).toBeNull();
    });

    it('should return an error object if the date and time are above the maximum threshold', () => {
      const control = new FormControl(new Date('2024-01-02T00:15:00'));
      the validator = service.validateMaxDate(new Date('2024-01-02T00:00:00'));
      expect(validator(control)).toEqual({ valueAboveMaxThreshold: true });
    });
  });
});

