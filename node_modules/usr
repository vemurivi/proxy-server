 [Test]
    public async Task FetchUser_ShouldReturnOk_WhenUserIsFetchedSuccessfully()
    {
        // Arrange
        var userId = "some-user-id";
        var transactionId = Guid.NewGuid();
        var response = new Response<UserEntry> { IsSuccess = true, Result = new UserEntry() };

        _userModelMock.Setup(x => x.FetchUserEntry(userId, transactionId))
            .ReturnsAsync(response);

        // Act
        var result = await _userController.FetchUser(userId);

        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().Be(response);
    }

    [Test]
    public async Task FetchUser_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        // Arrange
        var userId = "some-user-id";
        var transactionId = Guid.NewGuid();
        var errorMessage = "An error occurred";

        _userModelMock.Setup(x => x.FetchUserEntry(userId, transactionId))
            .ThrowsAsync(new Exception(errorMessage));

        // Act
        var result = await _userController.FetchUser(userId);

        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        var response = badRequestResult.Value as Response<UserEntry>;
        response.IsSuccess.Should().BeFalse();
        response.ErrorMessage.Should().Be(errorMessage);
    }
}

[Test]
    public async Task EditUser_ShouldReturnOk_WhenUpsertIsSuccessful()
    {
        // Arrange
        var updatedUser = new UserEntry(); // Create a sample UserEntry object
        _userModelMock.Setup(x => x.EditUserEntry(updatedUser))
            .ReturnsAsync(1); // Simulate a successful upsert operation

        // Act
        var result = await _userController.EditUser(updatedUser);

        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        var response = okResult.Value as Response<UserEntry>;
        response.IsSuccess.Should().BeTrue();
        response.ErrorMessage.Should().BeEmpty();
    }

    [Test]
    public async Task EditUser_ShouldReturnBadRequest_WhenUpsertFails()
    {
        // Arrange
        var updatedUser = new UserEntry(); // Create a sample UserEntry object
        _userModelMock.Setup(x => x.EditUserEntry(updatedUser))
            .ReturnsAsync(0); // Simulate a failed upsert operation

        // Act
        var result = await _userController.EditUser(updatedUser);

        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        var response = badRequestResult.Value as Response<UserEntry>;
        response.IsSuccess.Should().BeTrue();
        response.ErrorMessage.Should().Be("Failed to Upsert to Firestore");
    }

    [Test]
    public async Task EditUser_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        // Arrange
        var updatedUser = new UserEntry(); // Create a sample UserEntry object
        var exceptionMessage = "An error occurred";

        _userModelMock.Setup(x => x.EditUserEntry(updatedUser))
            .ThrowsAsync(new Exception(exceptionMessage));

        // Act
        var result = await _userController.EditUser(updatedUser);

        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        var response = badRequestResult.Value as Response<UserEntry>;
        response.IsSuccess.Should().BeTrue();
        response.ErrorMessage.Should().Be(exceptionMessage);
    }
}

using Moq;
using NUnit.Framework;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;

[TestFixture]
public class JobsControllerTests
{
    private Mock<ILogger<JobsController>> _loggerMock;
    private Mock<PreSortRefreshModel> _preSortRefreshModelMock;
    private Mock<ActiveRefreshModel> _activeRefreshModelMock;
    private Mock<MapLargeRefreshModel> _mapLargeRefreshModelMock;
    private Mock<LockRefreshModel> _lockRefreshModelMock;
    private Mock<PostSortRefreshModel> _postSortRefreshModelMock;
    private Mock<HpsSummarizationModel> _hpsSummarizationModelMock;
    private Mock<HfcsDataMapModel> _hfcsDataMapModelMock;
    private JobsController _jobsController;

    [SetUp]
    public void Setup()
    {
        _loggerMock = new Mock<ILogger<JobsController>>();
        _preSortRefreshModelMock = new Mock<PreSortRefreshModel>();
        _activeRefreshModelMock = new Mock<ActiveRefreshModel>();
        _mapLargeRefreshModelMock = new Mock<MapLargeRefreshModel>();
        _lockRefreshModelMock = new Mock<LockRefreshModel>();
        _postSortRefreshModelMock = new Mock<PostSortRefreshModel>();
        _hpsSummarizationModelMock = new Mock<HpsSummarizationModel>();
        _hfcsDataMapModelMock = new Mock<HfcsDataMapModel>();

        _jobsController = new JobsController(
            _loggerMock.Object,
            _preSortRefreshModelMock.Object,
            _activeRefreshModelMock.Object,
            _mapLargeRefreshModelMock.Object,
            _lockRefreshModelMock.Object,
            _postSortRefreshModelMock.Object,
            _hpsSummarizationModelMock.Object,
            _hfcsDataMapModelMock.Object
        );
    }

    [Test]
    public async Task TriggerLongRangePlanningJob_ShouldReturnOk_WhenJobIsTriggeredSuccessfully()
    {
        _preSortRefreshModelMock.Setup(x => x.LongRangePlanningJob()).Returns(Task.CompletedTask);

        var result = await _jobsController.TriggerLongRangePlanningJob();

        result.Should().BeOfType<OkResult>();
    }

    [Test]
    public async Task TriggerLongRangePlanningJob_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        var exceptionMessage = "An error occurred";
        _preSortRefreshModelMock.Setup(x => x.LongRangePlanningJob())
            .ThrowsAsync(new Exception(exceptionMessage));

        var result = await _jobsController.TriggerLongRangePlanningJob();

        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        badRequestResult.Value.Should().Be(exceptionMessage);
    }

    [Test]
    public async Task TriggerShortRangePlanningJob_ShouldReturnOk_WhenJobIsTriggeredSuccessfully()
    {
        _preSortRefreshModelMock.Setup(x => x.ShortRangePlanningJob()).Returns(Task.CompletedTask);

        var result = await _jobsController.TriggerShortRangePlanningJob();

        result.Should().BeOfType<OkResult>();
    }

    [Test]
    public async Task TriggerShortRangePlanningJob_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        var exceptionMessage = "An error occurred";
        _preSortRefreshModelMock.Setup(x => x.ShortRangePlanningJob())
            .ThrowsAsync(new Exception(exceptionMessage));

        var result = await _jobsController.TriggerShortRangePlanningJob();

        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        badRequestResult.Value.Should().Be(exceptionMessage);
    }

    [Test]
    public async Task TriggerActiveRefreshJob_ShouldReturnOk_WhenJobIsTriggeredSuccessfully()
    {
        _activeRefreshModelMock.Setup(x => x.Refresh()).Returns(Task.CompletedTask);

        var result = await _jobsController.TriggerActiveRefreshJob();

        result.Should().BeOfType<OkResult>();
    }

    [Test]
    public async Task TriggerActiveRefreshJob_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        var exceptionMessage = "An error occurred";
        _activeRefreshModelMock.Setup(x => x.Refresh())
            .ThrowsAsync(new Exception(exceptionMessage));

        var result = await _jobsController.TriggerActiveRefreshJob();

        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        badRequestResult.Value.Should().Be(exceptionMessage);
    }

    [Test]
    public async Task TriggerMapLargeWorkAreaRefreshJob_ShouldReturnOk_WhenJobIsTriggeredSuccessfully()
    {
        _mapLargeRefreshModelMock.Setup(x => x.RefreshFacilityWorkAreasForMapLarge()).Returns(Task.CompletedTask);

        var result = await _jobsController.TriggerMapLargeWorkAreaRefreshJob();

        result.Should().BeOfType<OkResult>();
    }

    [Test]
    public async Task TriggerMapLargeWorkAreaRefreshJob_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        var exceptionMessage = "An error occurred";
        _mapLargeRefreshModelMock.Setup(x => x.RefreshFacilityWorkAreasForMapLarge())
            .ThrowsAsync(new Exception(exceptionMessage));

        var result = await _jobsController.TriggerMapLargeWorkAreaRefreshJob();

        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        badRequestResult.Value.Should().Be(exceptionMessage);
    }

    [Test]
    public async Task TriggerDailyOperatingPlanLockCleanupJob_ShouldReturnOk_WhenJobIsTriggeredSuccessfully()
    {
        _lockRefreshModelMock.Setup(x => x.GetAndUpdateDocumentsWithExpiredLock()).Returns(Task.CompletedTask);

        var result = await _jobsController.TriggerDailyOperatingPlanLockCleanupJob();

        result.Should().BeOfType<OkResult>();
    }

    [Test]
    public async Task TriggerDailyOperatingPlanLockCleanupJob_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        var exceptionMessage = "An error occurred";
        _lockRefreshModelMock.Setup(x => x.GetAndUpdateDocumentsWithExpiredLock())
            .ThrowsAsync(new Exception(exceptionMessage));

        var result = await _jobsController.TriggerDailyOperatingPlanLockCleanupJob();

        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        badRequestResult.Value.Should().Be(exceptionMessage);
    }

    [Test]
    public async Task TriggerPostSortRefreshJob_ShouldReturnOk_WhenJobIsTriggeredSuccessfully()
    {
        _postSortRefreshModelMock.Setup(x => x.Refresh()).Returns(Task.CompletedTask);

        var result = await _jobsController.TriggerPostSortRefreshJob();

        result.Should().BeOfType<OkResult>();
    }

    [Test]
    public async Task TriggerPostSortRefreshJob_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        var exceptionMessage = "An error occurred";
        _postSortRefreshModelMock.Setup(x => x.Refresh())
            .ThrowsAsync(new Exception(exceptionMessage));

        var result = await _jobsController.TriggerPostSortRefreshJob();

        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        badRequestResult.Value.Should().Be(exceptionMessage);
    }

    [Test]
    public async Task TriggerHpsSummarizationJob_ShouldReturnOk_WhenJobIsTriggeredSuccessfully()
    {
        _hpsSummarizationModelMock.Setup(x => x.Refresh(It.IsAny<DateTime?>(), It.IsAny<string>())).ReturnsAsync("summary");

        var result = await _jobsController.TriggerHpsSummarizationJob(null, null);

        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().Be("summary");
    }

    [Test]
    public async Task TriggerHpsSummarizationJob_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        var exceptionMessage = "An error occurred";
        _hpsSummarizationModelMock.Setup(x => x.Refresh(It.IsAny<DateTime?>(), It.IsAny<string>()))
            .ThrowsAsync(new Exception(exceptionMessage));

        var result = await _jobsController.TriggerHpsSummarizationJob(null, null);

        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        badRequestResult.Value.Should().Be(exceptionMessage);
    }

    [Test]
    public async Task TriggerHfcsDataMapJob_ShouldReturnOk_WhenJobIsTriggeredSuccessfully()
    {
        _hfcsDataMapModelMock.Setup(x => x.MapMsdData()).Returns(Task.CompletedTask);

        var result = await _jobsController.TriggerHfcsDataMapJob();

        result.Should().BeOfType<OkResult>();
    }

    [Test]
    public async Task TriggerHfcsDataMapJob_ShouldReturnBadRequest_WhenExceptionIsThrown()
    {
        var exceptionMessage = "An error occurred";
        _hfcsDataMapModelMock.Setup(x => x.MapMsdData())
            .ThrowsAsync(new Exception(exceptionMessage));

        var result = await _jobsController.TriggerHfcsDataMapJob();

        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = result as BadRequestObjectResult;
        badRequestResult.Value.Should().Be(exceptionMessage);
    }
}
